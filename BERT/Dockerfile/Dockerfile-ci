ARG UBUNTU_VERSION=20.04

FROM ubuntu:${UBUNTU_VERSION} as base

# ENV http_proxy http://my-proxy.com
# ENV https_proxy http://my-proxy.com
# ENV no_proxy localnet.com
ENV TF_ENABLE_ONEDNN_OPTS 1

RUN echo "Acquire::http::proxy \"${http_proxy}\";" >> /etc/apt/apt.conf

ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
        software-properties-common \
        lsb-release \
        build-essential \
        ca-certificates \
        cmake \
        git \
        gnupg2 \
        wget \
        gdb \
        numactl \
        vim && \
        apt-get clean all

# Additional development tools
RUN apt-get install -y \
        protobuf-compiler \
        libprotobuf-dev \
        --no-install-recommends

# Quality of life tools
RUN apt-get install -y \
        bash-completion \
        curl \
        ninja-build \
        --no-install-recommends

# Install oneAPI components
RUN wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB -O - | apt-key add - && \
    echo "deb https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list && \
    apt-get update && \
    apt-get install -y \
        intel-oneapi-tbb \
        intel-oneapi-tbb-devel \
        intel-oneapi-mkl \
        intel-oneapi-mkl-devel \
        intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic

SHELL ["/bin/bash", "-c"]

WORKDIR /oneapi_src
ARG DNNL_BRANCH=rls-v2.6
RUN git clone --depth 1 --branch $DNNL_BRANCH https://github.com/oneapi-src/oneDNN.git oneDNN
RUN git config --global http.proxy $http_proxy
WORKDIR /oneapi_src/build
RUN source /opt/intel/oneapi/setvars.sh intel64 && \
    cmake -DCMAKE_CXX_COMPILER=icpc \
          -DCMAKE_C_COMPILER=icc \
          -DDNNL_CPU_RUNTIME=TBB \
          -DDNNL_LIBRARY_TYPE=SHARED \
          -DDNNL_GPU_RUNTIME=NONE \
          -H/oneapi_src/oneDNN \
          -G "Ninja" && \
    ninja dnnl install

# setting the id's used by Jenkins
ARG username=jenkins
ARG userid=115
ARG usergroup=119
RUN useradd -ms /bin/bash --uid ${userid} ${username}
RUN groupmod -o -g ${usergroup} ${username}
RUN usermod -a -G ${usergroup} ${username}





FROM base as bert-op-tensorflow

ARG PYTHON_VERSION=3.6
# NOTE: tf 1.15 doesn't support officially python versions newer that 3.6
RUN add-apt-repository ppa:deadsnakes/ppa -y && \
    apt-get update && \
    apt-get install -y \
        python${PYTHON_VERSION} \
        python${PYTHON_VERSION}-dev \
        python${PYTHON_VERSION}-distutils \
        pip \
        --no-install-recommends && \
    ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python

USER ${username}
ARG TF_VERSION=1.15.4
ARG TF_requirements=requirements-tf1.txt
COPY ${TF_requirements} /tmp/requirements.txt
RUN python -m pip install --upgrade pip wheel
RUN python -m pip install tensorflow==${TF_VERSION}
RUN python -m pip install -r /tmp/requirements.txt

USER root
ARG cache_bomb
RUN echo $cache_bomb # From this point on, cache is invalidated and every subsequent step will be done fresh
RUN apt-get update && apt-get upgrade -y





FROM base as bert-op-pytorch

RUN apt-get update && \
    apt-get install -y \
        python3 \
        python3-dev \
        python3-distutils \
        python3-pip \
        python-is-python3 \
        --no-install-recommends

USER ${username}
COPY requirements-pt.txt /tmp/requirements-pt.txt
RUN python -m pip install --upgrade pip wheel
RUN python -m pip install -r /tmp/requirements-pt.txt
